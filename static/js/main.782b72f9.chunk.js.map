{"version":3,"sources":["wind/util.js","wind/shaders/draw.vert.glsl","wind/shaders/quad.vert.glsl","wind/index.js","wind/shaders/draw.frag.glsl","wind/shaders/screen.frag.glsl","wind/shaders/update.frag.glsl","renderer.js","index.js","webpack:///./src/util.js?e0eb"],"names":["createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","createProgram","vertexSource","fragmentSource","program","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","wrapper","numAttributes","ACTIVE_ATTRIBUTES","i","attribute","getActiveAttrib","name","getAttribLocation","numUniforms","ACTIVE_UNIFORMS","uniform","getActiveUniform","getUniformLocation","createTexture","filter","data","width","height","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","Uint8Array","texImage2D","RGBA","UNSIGNED_BYTE","unit","activeTexture","TEXTURE0","createBuffer","buffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","bindAttribute","numComponents","enableVertexAttribArray","vertexAttribPointer","FLOAT","bindFramebuffer","framebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","defaultRampColors","0","0.1","0.2","0.3","0.4","0.5","0.6","1","WindGL","this","fadeOpacity","speedFactor","dropRate","dropRateBump","drawProgram","util","screenProgram","quadVert","updateProgram","quadBuffer","Float32Array","createFramebuffer","setColorRamp","resize","emptyPixels","canvas","backgroundTexture","NEAREST","screenTexture","colors","colorRampTexture","LINEAR","document","createElement","ctx","getContext","gradient","createLinearGradient","stop","addColorStop","fillStyle","fillRect","getImageData","getColorRamp","_numParticles","numParticles","particleRes","particleStateResolution","Math","ceil","sqrt","particleState","length","floor","random","particleStateTexture0","particleStateTexture1","particleIndices","particleIndexBuffer","windData","textureHeight","textureWidth","windTexture","image","disable","DEPTH_TEST","STENCIL_TEST","drawScreen","updateParticles","viewport","drawTexture","drawParticles","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","temp","opacity","useProgram","a_pos","uniform1i","u_screen","uniform1f","u_opacity","drawArrays","TRIANGLES","a_index","u_wind","u_particles","u_color_ramp","u_particles_res","uniform2f","u_wind_min","uMin","vMin","u_wind_max","uMax","vMax","POINTS","u_rand_seed","u_wind_res","u_speed_factor","u_drop_rate","u_drop_rate_bump","WindTile","options","visibleExtent","dataGridWidth","glCanvas","antialiasing","offset","pxRatio","max","window","devicePixelRatio","meta","parent","getElementById","id","stopped","init","callback","appendChild","wind","frame","extent","zoom","organizeData","setWind","style","vectorData","longMin","latMin","deltaLong","deltaLat","NUM_POINTS","uZero","abs","vZero","imageArray","j","flatCoordinates","flatCoordinates_","x","y","u","properties_","U","v","V","ii","r","g","draw","requestAnimationFrame","bind","windRender","gui","dat","base","olTile","crossOrigin","WMTS","url","layer","format","matrixSet","tileGrid","WMTSTileGrid","origin","resolutions","matrixIds","tileSize","VectorTileSource","visible","projection","get","MVT","sizes","vectorLayer","VectorTileLayer","map","olMap","layers","target","view","olView","center","maxZoom","on","e","mapSize","getSize","moving","initiatedGUI","updateRendererThrottled","setTimeout","updateRenderer","getView","key","currentFeatures","calculateExtent","getSource","getFeaturesInExtent","getZoom","ts","Date","now","updateData","initGUI","fn","wait","time","throttle","add","step","updateDisplay","onChange","updateTexture"],"mappings":"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","file":"static/js/main.782b72f9.chunk.js","sourcesContent":["\nfunction createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(shader));\n    }\n\n    return shader;\n}\n\nexport function createProgram(gl, vertexSource, fragmentSource) {\n    const program = gl.createProgram();\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexSource);\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(gl.getProgramInfoLog(program));\n    }\n\n    const wrapper = {program: program};\n\n    const numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttributes; i++) {\n        const attribute = gl.getActiveAttrib(program, i);\n        wrapper[attribute.name] = gl.getAttribLocation(program, attribute.name);\n    }\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; i++) {\n        const uniform = gl.getActiveUniform(program, i);\n        wrapper[uniform.name] = gl.getUniformLocation(program, uniform.name);\n    }\n\n    return wrapper;\n}\n\nexport function createTexture(gl, filter, data, width, height) {\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n    if (data instanceof Uint8Array) {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    } else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    }\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return texture;\n}\n\nexport function bindTexture(gl, texture, unit) {\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n}\n\nexport function createBuffer(gl, data) {\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n    return buffer;\n}\n\nexport function bindAttribute(gl, buffer, attribute, numComponents) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attribute);\n    gl.vertexAttribPointer(attribute, numComponents, gl.FLOAT, false, 0, 0);\n}\n\nexport function bindFramebuffer(gl, framebuffer, texture) {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    if (texture) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n}","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nattribute float a_index;\\n\\nuniform sampler2D u_particles;\\nuniform float u_particles_res;\\n\\nvarying vec2 v_particle_pos;\\n\\nvoid main() {\\n    vec4 color = texture2D(u_particles, vec2(\\n        fract(a_index / u_particles_res),\\n        floor(a_index / u_particles_res) / u_particles_res));\\n\\n    // decode current particle position from the pixel's RGBA value\\n    v_particle_pos = vec2(\\n        color.r / 255.0 + color.b,\\n        color.g / 255.0 + color.a);\\n\\n    gl_PointSize = 1.0;\\n    gl_Position = vec4(2.0 * v_particle_pos.x - 1.0, 1.0 - 2.0 * v_particle_pos.y, 0, 1);\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nattribute vec2 a_pos;\\n\\nvarying vec2 v_tex_pos;\\n\\nvoid main() {\\n    v_tex_pos = a_pos;\\n    gl_Position = vec4(1.0 - 2.0 * a_pos, 0, 1);\\n}\\n\";","\nimport * as util from './util';\n\nimport drawVert from './shaders/draw.vert.glsl';\nimport drawFrag from './shaders/draw.frag.glsl';\n\nimport quadVert from './shaders/quad.vert.glsl';\n\nimport screenFrag from './shaders/screen.frag.glsl';\nimport updateFrag from './shaders/update.frag.glsl';\n\nconst defaultRampColors = {\n    0.0: '#3288bd',\n    0.1: '#66c2a5',\n    0.2: '#abdda4',\n    0.3: '#e6f598',\n    0.4: '#fee08b',\n    0.5: '#fdae61',\n    0.6: '#f46d43',\n    1.0: '#d53e4f'\n};\n\nexport default class WindGL {\n    constructor(gl) {\n        this.gl = gl;\n\n        this.fadeOpacity = 0.996; // how fast the particle trails fade on each frame\n        this.speedFactor = 0.25; // how fast the particles move\n        this.dropRate = 0.003; // how often the particles move to a random place\n        this.dropRateBump = 0.01; // drop rate increase relative to individual particle speed\n\n        this.drawProgram = util.createProgram(gl, drawVert, drawFrag);\n        this.screenProgram = util.createProgram(gl, quadVert, screenFrag);\n        this.updateProgram = util.createProgram(gl, quadVert, updateFrag);\n\n        this.quadBuffer = util.createBuffer(gl, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]));\n        this.framebuffer = gl.createFramebuffer();\n\n        this.setColorRamp(defaultRampColors);\n        this.resize();\n    }\n\n    resize() {\n        const gl = this.gl;\n        const emptyPixels = new Uint8Array(gl.canvas.width * gl.canvas.height * 4);\n        // screen textures to hold the drawn screen for the previous and the current frame\n        this.backgroundTexture = util.createTexture(gl, gl.NEAREST, emptyPixels, gl.canvas.width, gl.canvas.height);\n        this.screenTexture = util.createTexture(gl, gl.NEAREST, emptyPixels, gl.canvas.width, gl.canvas.height);\n    }\n\n    setColorRamp(colors) {\n        // lookup texture for colorizing the particles according to their speed\n        this.colorRampTexture = util.createTexture(this.gl, this.gl.LINEAR, getColorRamp(colors), 16, 16);\n    }\n\n    set numParticles(numParticles) {\n        const gl = this.gl;\n\n        // we create a square texture where each pixel will hold a particle position encoded as RGBA\n        const particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(numParticles));\n        this._numParticles = particleRes * particleRes;\n\n        const particleState = new Uint8Array(this._numParticles * 4);\n        for (let i = 0; i < particleState.length; i++) {\n            particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n        }\n        // textures to hold the particle state for the current and the next frame\n        this.particleStateTexture0 = util.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n        this.particleStateTexture1 = util.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n\n        const particleIndices = new Float32Array(this._numParticles);\n        for (let i = 0; i < this._numParticles; i++) particleIndices[i] = i;\n        this.particleIndexBuffer = util.createBuffer(gl, particleIndices);\n    }\n    get numParticles() {\n        return this._numParticles;\n    }\n\n    setWind(windData) {\n        this.windData = windData;\n        const height= windData.textureHeight;\n        const width= windData.textureWidth;\n        this.windTexture = util.createTexture(this.gl, this.gl.LINEAR, windData.image, width, height);\n    }\n\n    draw() {\n        const gl = this.gl;\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.STENCIL_TEST);\n\n        util.bindTexture(gl, this.windTexture, 0);\n        util.bindTexture(gl, this.particleStateTexture0, 1);\n\n        this.drawScreen();\n        this.updateParticles();\n    }\n\n    drawScreen() {\n        const gl = this.gl;\n        // draw the screen into a temporary framebuffer to retain it as the background on the next frame\n        util.bindFramebuffer(gl, this.framebuffer, this.screenTexture);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n        this.drawTexture(this.backgroundTexture, this.fadeOpacity);\n        this.drawParticles();\n\n        util.bindFramebuffer(gl, null);\n        // enable blending to support drawing on top of an existing background (e.g. a map)\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n        this.drawTexture(this.screenTexture, 1.0);\n        gl.disable(gl.BLEND);\n\n        // save the current screen as the background for the next frame\n        const temp = this.backgroundTexture;\n        this.backgroundTexture = this.screenTexture;\n        this.screenTexture = temp;\n    }\n\n    drawTexture(texture, opacity) {\n        const gl = this.gl;\n        const program = this.screenProgram;\n        gl.useProgram(program.program);\n\n        util.bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n        util.bindTexture(gl, texture, 2);\n        gl.uniform1i(program.u_screen, 2);\n        gl.uniform1f(program.u_opacity, opacity);\n\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n\n    drawParticles() {\n        const gl = this.gl;\n        const program = this.drawProgram;\n        gl.useProgram(program.program);\n\n        util.bindAttribute(gl, this.particleIndexBuffer, program.a_index, 1);\n        util.bindTexture(gl, this.colorRampTexture, 2);\n\n        gl.uniform1i(program.u_wind, 0);\n        gl.uniform1i(program.u_particles, 1);\n        gl.uniform1i(program.u_color_ramp, 2);\n\n        gl.uniform1f(program.u_particles_res, this.particleStateResolution);\n        gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n        gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n\n        gl.drawArrays(gl.POINTS, 0, this._numParticles);\n    }\n\n    updateParticles() {\n        const gl = this.gl;\n        util.bindFramebuffer(gl, this.framebuffer, this.particleStateTexture1);\n        gl.viewport(0, 0, this.particleStateResolution, this.particleStateResolution);\n\n        const program = this.updateProgram;\n        gl.useProgram(program.program);\n\n        util.bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n\n        gl.uniform1i(program.u_wind, 0);\n        gl.uniform1i(program.u_particles, 1);\n\n        gl.uniform1f(program.u_rand_seed, Math.random());\n        gl.uniform2f(program.u_wind_res, this.windData.width, this.windData.height);\n        gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n        gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n        gl.uniform1f(program.u_speed_factor, this.speedFactor);\n        gl.uniform1f(program.u_drop_rate, this.dropRate);\n        gl.uniform1f(program.u_drop_rate_bump, this.dropRateBump);\n\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n        // swap the particle state textures so the new one becomes the current one\n        const temp = this.particleStateTexture0;\n        this.particleStateTexture0 = this.particleStateTexture1;\n        this.particleStateTexture1 = temp;\n    }\n}\n\nfunction getColorRamp(colors) {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    canvas.width = 256;\n    canvas.height = 1;\n\n    const gradient = ctx.createLinearGradient(0, 0, 256, 0);\n    for (const stop in colors) {\n        gradient.addColorStop(+stop, colors[stop]);\n    }\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, 256, 1);\n\n    return new Uint8Array(ctx.getImageData(0, 0, 256, 1).data);\n}","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D u_wind;\\nuniform vec2 u_wind_min;\\nuniform vec2 u_wind_max;\\nuniform sampler2D u_color_ramp;\\n\\nvarying vec2 v_particle_pos;\\nfloat min = 0.01;\\nvoid main() {\\n    vec2 velocity = mix(u_wind_min, u_wind_max, texture2D(u_wind, v_particle_pos).rg);\\n    float speed_t = length(velocity) / length(u_wind_max);\\n\\n    // color ramp is encoded in a 16x16 texture\\n    if(abs(speed_t) < min) {\\n        gl_FragColor = vec4(255.0, 255.0, 255.0, 0.0);\\n    } else {\\n        vec2 ramp_pos = vec2(\\n        fract(16.0 * speed_t),\\n        floor(16.0 * speed_t) / 16.0);\\n        // gl_FragColor = vec4(255.0, 255.0, 255.0, 255.0);\\n        gl_FragColor = texture2D(u_color_ramp, ramp_pos);\\n    }\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D u_screen;\\nuniform float u_opacity;\\n\\nvarying vec2 v_tex_pos;\\n\\nvoid main() {\\n    vec4 color = texture2D(u_screen, 1.0 - v_tex_pos);\\n    // a hack to guarantee opacity fade out even with a value close to 1.0\\n    gl_FragColor = vec4(floor(255.0 * color * u_opacity) / 255.0);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D u_particles;\\nuniform sampler2D u_wind;\\nuniform vec2 u_wind_res;\\nuniform vec2 u_wind_min;\\nuniform vec2 u_wind_max;\\nuniform float u_rand_seed;\\nuniform float u_speed_factor;\\nuniform float u_drop_rate;\\nuniform float u_drop_rate_bump;\\n\\nvarying vec2 v_tex_pos;\\n\\n// pseudo-random generator\\nconst vec3 rand_constants = vec3(12.9898, 78.233, 4375.85453);\\nfloat rand(const vec2 co) {\\n    float t = dot(rand_constants.xy, co);\\n    return fract(sin(t) * (rand_constants.z + t));\\n}\\n\\n// wind speed lookup; use manual bilinear filtering based on 4 adjacent pixels for smooth interpolation\\nvec2 lookup_wind(const vec2 uv) {\\n    // return texture2D(u_wind, uv).rg; // lower-res hardware filtering\\n    vec2 px = 1.0 / u_wind_res;\\n    vec2 vc = (floor(uv * u_wind_res)) * px;\\n    vec2 f = fract(uv * u_wind_res);\\n    vec2 tl = texture2D(u_wind, vc).rg;\\n    vec2 tr = texture2D(u_wind, vc + vec2(px.x, 0)).rg;\\n    vec2 bl = texture2D(u_wind, vc + vec2(0, px.y)).rg;\\n    vec2 br = texture2D(u_wind, vc + px).rg;\\n    return mix(mix(tl, tr, f.x), mix(bl, br, f.x), f.y);\\n}\\n\\nvoid main() {\\n    vec4 color = texture2D(u_particles, v_tex_pos);\\n    vec2 pos = vec2(\\n        color.r / 255.0 + color.b,\\n        color.g / 255.0 + color.a); // decode particle position from pixel RGBA\\n\\n    vec2 velocity = mix(u_wind_min, u_wind_max, lookup_wind(pos));\\n    float speed_t = length(velocity) / length(u_wind_max);\\n\\n    // take EPSG:4236 distortion into account for calculating where the particle moved\\n    // float distortion = cos(radians(pos.y * 180.0 - 90.0));\\n    vec2 offset = vec2(velocity.x , -velocity.y) * 0.0001 * u_speed_factor;\\n\\n    // update particle position, wrapping around the date line\\n    pos = fract(1.0 + pos + offset);\\n\\n    // a random seed to use for the particle drop\\n    vec2 seed = (pos + v_tex_pos) * u_rand_seed;\\n\\n    // drop rate is a chance a particle will restart at random position, to avoid degeneration\\n    float drop_rate = u_drop_rate + speed_t * u_drop_rate_bump;\\n    float drop = step(1.0 - drop_rate, rand(seed));\\n\\n    vec2 random_pos = vec2(\\n        rand(seed + 1.3),\\n        rand(seed + 2.1));\\n    pos = mix(pos, random_pos, drop);\\n\\n    // encode the new particle position back into RGBA\\n    gl_FragColor = vec4(\\n        fract(pos * 255.0),\\n        floor(pos * 255.0) / 255.0);\\n}\\n\";","import WindGL from './wind/index';\n\n\nexport default class WindTile {\n    constructor(options) {\n        this.options = options;\n        this.visibleExtent = [-180, -90, 180, 90];\n        this.width = options.width || 512;\n        this.height = options.height || 512;\n        this.dataGridWidth = 360;\n        this.glCanvas = options.canvas ||  document.createElement('canvas');\n        this.gl = options.gl || this.glCanvas.getContext('webgl', {antialiasing: false});\n        this.offset = options.offset || [0,0];\n        this.pxRatio = Math.max(Math.floor(window.devicePixelRatio) || 1, 2);\n        this.meta = options.meta || {};\n        this.parent = options.parent || document.getElementById('root');\n        this.glCanvas.id = 'gl-canvas';\n        this.stopped = false;\n        this.init();\n        this.callback = options.callback;\n    }\n    init() {\n        this.parent.appendChild(this.glCanvas);\n        this.glCanvas.width = this.width;\n        this.glCanvas.height = this.height;\n        this.gl.width = this.width;\n        this.gl.height = this.height;\n        \n        this.wind = window.wind = new WindGL(this.gl);\n        this.wind.numParticles = 11024;\n        this.frame();\n        if (this.pxRatio !== 1) {\n            this.meta['retina resolution'] = true;\n        } \n    }\n    updateData(data, extent, zoom, options) {\n        const windData = this.windData= this.organizeData(data, extent,zoom, options);\n        this.wind.setWind(windData);\n        this.stopped = false;\n        this.glCanvas.style = 'display:block';\n        windData.image = null;\n    }\n    stop() {\n        delete this.wind.windData;\n        this.stopped = true;\n        this.glCanvas.style = 'display:none';\n \n    }\n    organizeData(data, extent, zoom, options) {\n        const vectorData = data;\n        const longMin = extent[0];\n        const latMin = extent[1];\n        const deltaLong = extent[2]-extent[0];\n        const deltaLat = extent[3]-extent[1];\n        // const isZoomedIn = zoom > 6;\n        // const isLowZoom = zoom < 3;\n        // const width = isLowZoom ? 360 : isZoomedIn ? 90 : 180 ;\n        // const height = isLowZoom ? 180 :isZoomedIn ? 45 : 90;\n        const width = this.dataGridWidth;\n        const height = this.dataGridWidth /2;\n        const NUM_POINTS = data.length;\n\n        const { uMin, vMin, uMax, vMax } = options;\n        const uZero = Math.floor(255 * Math.abs(0 - uMin) / (uMax - uMin));\n        const vZero =  Math.floor(255 * Math.abs(0 - vMin) / (vMax - vMin));\n        const imageArray = new Uint8Array(width * height * 4);\n        const j = new Uint8Array(width * height * 4);\n\n        for (var i = 0; i < NUM_POINTS; i++) {\n            const flatCoordinates = vectorData[i].flatCoordinates_;\n            const x = Math.floor((Math.abs(flatCoordinates[0] - longMin) / deltaLong ) * width);\n            const y = Math.floor(height - ((Math.abs(flatCoordinates[1] - latMin) / deltaLat ) * height));\n            const u = vectorData[i].properties_.U;\n            const v = vectorData[i].properties_.V;\n            const ii = (y * width + x) * 4;\n            j[ii] = i;\n            const r = Math.floor(255 * (u - uMin) / (uMax - uMin));\n            const g = Math.floor(255 * (v - vMin) / (vMax - vMin));\n            imageArray[ii + 0] = r;\n            imageArray[ii + 1] = g;\n            imageArray[ii + 2] = 0;\n            imageArray[ii + 3] = 255;\n\n        };\n\n        // Fill in empty pixels with zero wind color\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const i = (y * width + x) * 4;\n                const index = j[i];\n                if(!index) {\n                    imageArray[i + 0] = uZero\n                    imageArray[i + 1] = vZero\n                    imageArray[i + 2] = 0;\n                    imageArray[i + 3] = 255;\n                }\n            }\n        }\n        const windData = {\n            image: imageArray,\n            uMin,\n            vMin,\n            uMax,\n            vMax,\n            width: deltaLong,\n            height: deltaLat,\n            textureHeight: height,\n            textureWidth: width\n          }\n        return windData;\n    }\n    frame() {\n        if (this.wind.windData) {\n            this.wind.draw();\n        }\n        requestAnimationFrame(this.frame.bind(this));\n      }\n}\n","\nimport WindTile from './renderer';\nimport * as dat from 'dat.gui';\nimport olTile from 'ol/layer/Tile';\nimport WMTS from 'ol/source/WMTS';\nimport WMTSTileGrid from 'ol/tilegrid/WMTS';\nimport MVT from 'ol/format/MVT'\nimport {get} from 'ol/proj';\nimport VectorTileSource from 'ol/source/VectorTile';\nimport VectorTileLayer from 'ol/layer/VectorTile';\nimport olMap from 'ol/Map';\nimport olView from 'ol/View';\nimport { throttle } from './util';\nimport './App.css';\n\nconst gui = new dat.GUI();\n\nconst tileGridSizes = [\n    {\n      \"matrixWidth\": 2,\n      \"matrixHeight\": 1\n    },\n    {\n      \"matrixWidth\": 3,\n      \"matrixHeight\": 2\n    },\n    {\n      \"matrixWidth\": 5,\n      \"matrixHeight\": 3\n    },\n    {\n      \"matrixWidth\": 10,\n      \"matrixHeight\": 5\n    },\n    {\n      \"matrixWidth\": 20,\n      \"matrixHeight\": 10\n    },\n    {\n      \"matrixWidth\": 40,\n      \"matrixHeight\": 20\n    }\n  ];\n  var base = new olTile({\n    extent: [-180, -90, 180, 90],\n    crossOrigin: 'anonymous',\n    source: new WMTS({\n      url: '//gibs.earthdata.nasa.gov/wmts/epsg4326/best/wmts.cgi?TIME=2020-04-27',\n      layer: 'BlueMarble_NextGeneration',\n      format: 'image/jpeg',\n      matrixSet: '500m',\n      tileGrid: new WMTSTileGrid({\n        origin: [-180, 90],\n        resolutions: [0.140625, 0.0703125, 0.03515625, 0.017578125, 0.0087890625, 0.00439453125, 0.002197265625],\n        matrixIds: [2, 3, 4, 5, 6, 7, 8],\n        tileSize: 512,\n      }),\n    }),\n  });\n  const source = new VectorTileSource({\n      visible: true,\n      projection: get('EPSG:4326'),\n      url: 'https://uat.gibs.earthdata.nasa.gov/wmts/epsg4326/best/wmts.cgi?TIME=2020-03-21&layer=MISR_Cloud_Motion_Vector&tilematrixset=2km&Service=WMTS&Request=GetTile&Version=1.0.0&FORMAT=application%2Fvnd.mapbox-vector-tile&TileMatrix={z}&TileCol={x}&TileRow={y}',      format: new MVT(),\n      tileGrid: new WMTSTileGrid({\n        extent: [-180, -90, 180, 90],\n        resolutions: [0.5625, 0.28125, 0.140625, 0.0703125, 0.03515625, 0.017578125],\n        tileSize: [512, 512],\n        sizes: tileGridSizes,\n      }),\n    });\n  const vectorLayer = new VectorTileLayer({\n    source: source,\n    style: []\n  });\n  var map = new olMap({\n    layers: [base, vectorLayer],\n    target: \"map\",\n    view: new olView({\n      center: [0, 0],\n      maxZoom: 12,\n      zoom: 1,\n      extent: [-180, -90, 180, 90],\n      projection: get('EPSG:4326'),\n    })\n  });\n  \nlet i = 0;\nsource.on('tileloadstart', function(e) {  \n    i++\n});\nlet windRender;\nsource.on('tileloadend', function(e) {  \n    if(!windRender){\n        const mapSize = map.getSize();\n        const options = {\n            uMin: -76.57695007324219,   \n            uMax: 44.30181884765625,\n            vMin: -76.57695007324219,\n            vMax: 44.30181884765625,\n            width: mapSize[0],\n            height:mapSize[1]\n        }\n        windRender = new WindTile(options);  \n    }\n    i--\n    if(i===1 && !windRender.stopped && windRender) {\n        windRender.stop() \n    }\n    if(i=== 0 && !moving && windRender){\n      if(!initiatedGUI) {\n        setTimeout(function() { updateRenderer(); }, 1);\n      } else {\n        updateRendererThrottled();\n      }      \n    }\n});\nlet moving = false;\nmap.getView().on('change:center', () =>{\n    windRender.stop()\n    moving = true;\n});\nmap.getView().on('propertychange', (e) => {\n    if (e.key ==='resolution' && windRender) {\n        windRender.stop()\n        moving = true\n    }\n});\nmap.on('moveend', (e) => {\n    moving = false;\n    if(i === 0 && windRender ) updateRendererThrottled();\n});\nlet initiatedGUI = false;\nlet currentFeatures, zoom, extent, options;\nconst updateRenderer = () => {\n    const view = map.getView();\n    const mapSize = map.getSize();\n    extent = view.calculateExtent(mapSize);\n    currentFeatures = vectorLayer.getSource().getFeaturesInExtent(extent);\n    zoom = view.getZoom();\n    options = {\n        uMin: -55.806217193603516,   \n        uMax: 45.42329406738281,\n        vMin: -5.684286117553711,\n        vMax: 44.30181884765625,\n        width: mapSize[0],\n        height:mapSize[1],\n        ts: Date.now(),\n    }\n    windRender.updateData(currentFeatures, extent, zoom, options);\n    if(!initiatedGUI) initGUI()\n}\nconst updateRendererThrottled = throttle(updateRenderer, 150);\nconst initGUI = function() {\n    const wind = windRender.wind;\n    gui.add(wind, 'numParticles', 144, 248832);\n    gui.add(wind, 'fadeOpacity', 0.96, 0.999).step(0.001).updateDisplay();\n    gui.add(wind, 'speedFactor', 0.05, 1.0);\n    gui.add(wind, 'dropRate', 0, 0.1);\n    gui.add(wind, 'dropRateBump', 0, 0.2);\n    gui.add(windRender, 'dataGridWidth', 18, 360).step(2).onChange(updateTexture);\n    initiatedGUI = true;\n}\nconst updateTexture = function() {\n  windRender.updateData(currentFeatures, extent, zoom, options);\n}\n","\n\nexport function convert(lat, long, extent){\n    const TILE_HEIGHT_WIDTH = 512;\n    const long0 = extent[0];\n    const lat0 = extent[1];\n    \n    const dxExtent = Math.abs(extent[0] - extent[2]);\n    const dyExtent = Math.abs(extent[1] - extent[3]);\n\n    const x = TILE_HEIGHT_WIDTH * ((long0 - long) / dxExtent)\n    const y = TILE_HEIGHT_WIDTH * ((lat0 - lat) / dyExtent)\n\n    return {\n        x:x,\n        y:y\n    };\n}\n// const scale = Math.floor(Math.pow(255, 2) / Math.max(512, 512) / 3);\nexport function encode(value, scale) {\n    var b = 255;\n    value = value * scale + b * b / 2;\n    var pair = [\n        Math.floor((value % b) / b * 255),\n        Math.floor(Math.floor(value / b) / b * 255)\n    ];\n    return pair;\n}\n\nexport function decode(pair, scale) {\n    var b = 255;\n    return (((pair[0] / 255) * b +\n        (pair[1] / 255) * b * b) - b * b / 2) / scale;\n}\n\n// https://codepen.io/SitePoint/pen/RRLVAL?editors=1010\nexport function throttle(fn, wait) {\n    var time = Date.now();\n    return function() {\n      if ((time + wait - Date.now()) < 0) {\n        fn();\n        time = Date.now();\n      }\n    }\n}"],"sourceRoot":""}